{"ast":null,"code":"var _jsxFileName = \"/Users/an_ger/coding/An_Ger UI/src/components/Button/button.tsx\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nexport let ButtonSize;\n\n(function (ButtonSize) {\n  ButtonSize[\"Large\"] = \"lg\";\n  ButtonSize[\"Small\"] = \"sm\";\n})(ButtonSize || (ButtonSize = {}));\n\nexport let ButtonType;\n\n(function (ButtonType) {\n  ButtonType[\"Secondary\"] = \"secondary\";\n  ButtonType[\"Primary\"] = \"primary\";\n  ButtonType[\"Default\"] = \"default\";\n  ButtonType[\"Danger\"] = \"danger\";\n  ButtonType[\"Link\"] = \"link\";\n})(ButtonType || (ButtonType = {}));\n\nconst Button = props => {\n  const {\n    btnType,\n    className,\n    disabled,\n    size,\n    children,\n    href,\n    ...restProps\n  } = props;\n  const classes = classNames(\"btn\", className, {\n    [`btn-${btnType}`]: btnType,\n    [`btn-${size}`]: size,\n    disabled: btnType === ButtonType.Link && disabled\n  });\n\n  if (btnType === ButtonType.Link) {\n    return /*#__PURE__*/React.createElement(\"a\", Object.assign({\n      className: classes,\n      href: href\n    }, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }), children);\n  } else {\n    return /*#__PURE__*/React.createElement(\"button\", Object.assign({\n      className: classes,\n      disabled: disabled\n    }, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }), children);\n  }\n};\n\nButton.defaultProps = {\n  disabled: false,\n  btnType: ButtonType.Default\n};\nexport default Button;","map":{"version":3,"sources":["/Users/an_ger/coding/An_Ger UI/src/components/Button/button.tsx"],"names":["React","classNames","ButtonSize","ButtonType","Button","props","btnType","className","disabled","size","children","href","restProps","classes","Link","defaultProps","Default"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAIZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAqBZ,MAAMC,MAA6B,GAAIC,KAAD,IAAW;AAC/C,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,IANI;AAOJ,OAAGC;AAPC,MAQFP,KARJ;AASA,QAAMQ,OAAO,GAAGZ,UAAU,CAAC,KAAD,EAAQM,SAAR,EAAmB;AAC3C,KAAE,OAAMD,OAAQ,EAAhB,GAAoBA,OADuB;AAE3C,KAAE,OAAMG,IAAK,EAAb,GAAiBA,IAF0B;AAG3CD,IAAAA,QAAQ,EAAEF,OAAO,KAAKH,UAAU,CAACW,IAAvB,IAA+BN;AAHE,GAAnB,CAA1B;;AAKA,MAAIF,OAAO,KAAKH,UAAU,CAACW,IAA3B,EAAiC;AAC/B,wBACE;AAAG,MAAA,SAAS,EAAED,OAAd;AAAuB,MAAA,IAAI,EAAEF;AAA7B,OAAuCC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGF,QADH,CADF;AAKD,GAND,MAMO;AACL,wBACE;AAAQ,MAAA,SAAS,EAAEG,OAAnB;AAA4B,MAAA,QAAQ,EAAEL;AAAtC,OAAoDI,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGF,QADH,CADF;AAKD;AACF,CA5BD;;AA6BAN,MAAM,CAACW,YAAP,GAAsB;AACpBP,EAAAA,QAAQ,EAAE,KADU;AAEpBF,EAAAA,OAAO,EAAEH,UAAU,CAACa;AAFA,CAAtB;AAIA,eAAeZ,MAAf","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nexport enum ButtonSize {\n  Large = \"lg\",\n  Small = \"sm\",\n}\nexport enum ButtonType {\n  Secondary = \"secondary\",\n  Primary = \"primary\",\n  Default = \"default\",\n  Danger = \"danger\",\n  Link = \"link\",\n}\n\ninterface BaseButtonProps {\n  className?: string;\n  disabled?: boolean;\n  size?: ButtonSize;\n  btnType?: ButtonType;\n  children: React.ReactNode;\n  href?: string;\n}\ntype NativeButtonProps = BaseButtonProps &\n  React.ButtonHTMLAttributes<HTMLElement>;\ntype AnchorButtonProps = BaseButtonProps &\n  React.AnchorHTMLAttributes<HTMLElement>;\nexport type Buttonprops = Partial<NativeButtonProps & AnchorButtonProps>;\nconst Button: React.FC<Buttonprops> = (props) => {\n  const {\n    btnType,\n    className,\n    disabled,\n    size,\n    children,\n    href,\n    ...restProps\n  } = props;\n  const classes = classNames(\"btn\", className, {\n    [`btn-${btnType}`]: btnType,\n    [`btn-${size}`]: size,\n    disabled: btnType === ButtonType.Link && disabled,\n  });\n  if (btnType === ButtonType.Link) {\n    return (\n      <a className={classes} href={href} {...restProps}>\n        {children}\n      </a>\n    );\n  } else {\n    return (\n      <button className={classes} disabled={disabled} {...restProps}>\n        {children}\n      </button>\n    );\n  }\n};\nButton.defaultProps = {\n  disabled: false,\n  btnType: ButtonType.Default,\n};\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}